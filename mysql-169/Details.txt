
Acknowledge: Shan Lu (shanlu@cs.wisc.edu)


+--------------------+
|                    |
| SUMMARY            |
|                    |
+--------------------+

A concurrency bug in MySQL-3.23.56

This is a concurrency bug that involves multiple variables

+---------------------------------------------------------+
|                                                         |
| DETAILS                                                 |
|                                                         |
+---------------------------------------------------------+

Some details can also be found at:
http://bugs.mysql.com/bug.php?id=169

The bug is in function 'generate_table' (sql/sql_delete.cc)

 the first thread is performing 'delete' while the
other therad is performing 'insert'. The first thread grabs
'LOCK_open', delete the entries in the table, releases
'LOCK_open'. At this time, the second thread gets
'LOCK_open', insert an entry into the same table, release
'LOCK_open', gets 'LOCK_log', logs 'insert' event and
release 'LOCK_log'. Then, the first thread gets 'LOCK_log',
log 'delete' event, and release 'LOCK_log'.

Thread 1                     Thread 2

int generate_table(...)      int mysql_insert(...)
{                            {
  lock(&LOCK_open);
  // delete entries
  unlock(&LOCK_open);

                               lock($LOCK_open);
                               // insert entry
                               unlock($LOCK_open);
                               

                               lock(&LOCK_log);
                               log.write(...);
                               unlock(&LOCK_log);

  lock(&LOCK_log);
  log.write(...);
  unlock(&LOCK_log);

}                            }


If this interleaving happens, the table will have one entry
finally. However, in the log file, the 'insert' event will
precede the 'delete' event, causing an inconsistency. This
inconsistency will probably cause problem in database
recovery because mysql relies on logs to recover the
database.

